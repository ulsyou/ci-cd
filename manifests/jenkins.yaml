kind: PersistentVolume
apiVersion: v1
metadata:
  name: jenkins
  labels:
    type: local
spec:
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/data/jenkins/"

---

kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: jenkins-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  namespace: default
automountServiceAccountToken: true

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: Jenkins-cluster-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: jenkins
  namespace: default

---

apiVersion: v1
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: kubectl-jenkins-context
data:
  kubectl-config-context.sh: |-
    #!/bin/bash -v

    kubectl config set-credentials jenkins --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    kubectl config set-cluster minikube --server="https://192.168.99.108:8443" --certificate-authority="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
    kubectl config set-context jenkins-minikube --cluster=minikube --user=jenkins --namespace=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
    kubectl config use-context jenkins-minikube
    chmod 755 ~/.kube/config

---

apiVersion: v1
kind: Service
metadata:
  name: jenkins
  labels:
    app: jenkins
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    app: jenkins
    tier: jenkins
  type: NodePort

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  labels:
    app: jenkins
spec:
  selector:
    matchLabels:
      app: jenkins
      tier: jenkins
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: jenkins
        tier: jenkins
    spec:
      serviceAccountName: jenkins
      securityContext:
        fsGroup: 0
      containers:
      - name: jenkins
        image: 192.168.49.2:30400/jenkins:latest
        imagePullPolicy: Always
        env:
        - name: DOCKER_HOST
          value: tcp://localhost:2375
        volumeMounts:
        - name: jenkins-persistent-storage
          mountPath: /var/jenkins_home
        ports:
        - containerPort: 8080
          name: jenkins
        securityContext:
          runAsUser: 0
      - name: dind
        image: docker:dind
        securityContext:
          privileged: true
        args:
        - dockerd
        - --host=tcp://0.0.0.0:2375
        - --tls=false
        - --insecure-registry=192.168.49.2:30400
        env:
        - name: DOCKER_TLS_CERTDIR
          value: ""
        volumeMounts:
        - name: docker-storage
          mountPath: /var/lib/docker
      volumes:
      - name: jenkins-persistent-storage
        persistentVolumeClaim:
          claimName: jenkins-claim
      - name: docker-storage
        emptyDir: {}
